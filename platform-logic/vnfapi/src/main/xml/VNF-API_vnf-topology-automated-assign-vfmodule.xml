<service-logic xmlns='http://www.openecomp.org/sdnc/svclogic' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://www.openecomp.org/sdnc/svclogic ./svclogic.xsd' module='VNF-API' version='${project.version}'><method rpc='vnf-topology-automated-assign-vfmodule' mode='sync'>
<block atomic="true"><get-resource plugin='org.openecomp.sdnc.sli.resource.sql.SqlResource' resource='SQL'
  key='SELECT * from VF_MODULE_MODEL WHERE customization_uuid = $vnf-topology-operation-input.vnf-request-information.model-customization-uuid'
  pfx='db.vf-module-model'>

<outcome value='failure'>
<return status='failure'>
	<parameter name='ack-final' value='Y'/>
	<parameter name="error-code" value="500" />
    <parameter name="error-message" value="Error reading VF_MODULE_MODEL table" />
</return></outcome><outcome value='not-found'>
<return status='failure'>
	<parameter name='ack-final' value='Y'/>
	<parameter name="error-code" value="404" />
    <parameter name="error-message" value="`'No model found for VF module customization UUID ' + $vnf-topology-operation-input.vnf-request-information.model-customization-uuid`" />
</return></outcome></get-resource><set>
	<parameter name="service-data.vnf-id" value="`$vnf-topology-operation-input.vnf-request-information.vnf-id`"/>
	<parameter name="service-data.service-information.service-instance-id" value="`$vnf-topology-operation-input.service-information.service-instance-id`"/>
	<parameter name="service-data.service-information.service-type" value="`$vnf-topology-operation-input.service-information.service-type`"/>
</set><set>
	<parameter name="service-data." value="vnf-topology-operation-input." /></set><block atomic='true'><get-resource plugin="org.openecomp.sdnc.sli.aai.AAIService" 
		resource="availability-zones" 
		key="cloud-region.cloud-owner = 'att-aic' AND 
		     cloud-region.cloud-region-id = $vnf-topology-operation-input.vnf-request-information.aic-cloud-region"
        pfx='aai.availability-zones[]' local-only='false' >

<outcome value='not-found'>
<return status='failure'>
	<parameter name='ack-final' value='Y'/>
	<parameter name="error-code" value="404" />
    <parameter name="error-message" value="`'aic-cloud-region,'+ $vnf-topology-operation-input.vnf-request-information.aic-cloud-region + ' not found in AAI'`" />
</return></outcome><outcome value='failure'>
<return status='failure'>
	<parameter name='ack-final' value='Y'/>
	<parameter name="error-code" value="500" />
    <parameter name="error-message" value="Error retrieving cloud region from AAI" />
</return></outcome></get-resource><switch test='`$aai.availability-zones_length`'>
<outcome value=''><set>
<parameter name='aai.availability-zones_length' value='0' />
</set></outcome></switch><for index='az-index' start='0' end='`$aai.availability-zones_length`' >
<set>
<parameter name='tmp.vnf-topology.vnf-assignments.availability-zones[$az-index].availability-zone'
  value='`$aai.availability-zones[$az-index].availability-zone-name`' />
</set></for></block><get-resource plugin='org.openecomp.sdnc.sli.resource.sql.SqlResource' resource='SQL'
  key='SELECT * from VF_MODULE_TO_VFC_MAPPING WHERE vf_module_customization_uuid = $vnf-topology-operation-input.vnf-request-information.model-customization-uuid'
  pfx='db.vf-module-to-vfc-mapping[]'>

<outcome value='failure'>
<return status='failure'>
	<parameter name='ack-final' value='Y'/>
	<parameter name="error-code" value="500" />
    <parameter name="error-message" value="Error reading VF_MODULE_TO_VFC_MAPPING table" />
</return></outcome><outcome value='not-found'>
<set>
<parameter name='db.vf-module-to-vfc-mapping_length' value='0' />
</set></outcome></get-resource><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms_length'
  value='`$db.vf-module-to-vfc-mapping_length`' />
</set><for index='vm-type-index' start='0' end='`$db.vf-module-to-vfc-mapping_length`' >
<block atomic="true"><switch test="`$db.vf-module-to-vfc-mapping[$vm-type-index].vm-count`">
<outcome value=''><block>
</block></outcome><outcome value='0'>
<block>
</block></outcome><outcome value='Other'><block atomic="true"><get-resource plugin='org.openecomp.sdnc.sli.resource.sql.SqlResource' resource='SQL'
  key='SELECT * from VFC_MODEL WHERE customization_uuid = $db.vf-module-to-vfc-mapping[$vm-type-index].vfc-customization-uuid'
  pfx='db.vfc-model'>

<outcome value='failure'>
<return status='failure'>
	<parameter name='ack-final' value='Y'/>
	<parameter name="error-code" value="500" />
    <parameter name="error-message" value="Error reading VFC_MODEL table" />
</return></outcome><outcome value='not-found'>
<return status='failure'>
	<parameter name='ack-final' value='Y'/>
	<parameter name="error-code" value="500" />
    <parameter name="error-message" value="`'No entries found in VFC_MODEL table for customization UUID ' + $db.vf-module-to-vfc-mapping[$db-vm-index].vfc-customization-uuid`" />
</return></outcome></get-resource><block atomic="true"><set>
	<parameter name='vnfc-index' value='0' />
</set>
<switch test='`$db.vf-module-to-vfc-mapping[$vm-type-index].vm-count`' >
<outcome value=''><set>
<parameter name='db.vf-module-to-vfc-mapping[$vm-type-index].vm-count' value='0' />

</set></outcome></switch><for index='vm-index' start='0' end='`$db.vf-module-to-vfc-mapping[$vm-type-index].vm-count`' >
<block atomic='true'><set>
<parameter name='naming-policy-generate-name-input.vfc-customization-uuid' 
	value='`$db.vfc-model.customization-uuid`' />
<parameter name='naming-policy-generate-name-input.policy-instance-name' 
	value='`$db.vfc-model.naming-policy`' />
<parameter name='naming-policy-generate-name-input.naming-type' value='VM' /></set><call module='VNF-API' rpc='naming-policy-generate-name' mode='sync' ><outcome value='failure'>
<return status='failure'>
	<parameter name='ack-final' value='Y'/>
	<parameter name="error-code" value="500" />
    <parameter name="error-message" value="Failed get generate vm-name" />
</return></outcome></call><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-names[$vm-index].vm-name' 
	value='`$naming-policy-generate-name-output.vm-name`' /></set><block atomic='true'><set>
<parameter name='naming-policy-generate-name-input.vfc-customization-uuid' 
	value='`$db.vfc-model.customization-uuid`' />
<parameter name='naming-policy-generate-name-input.policy-instance-name' 
	value='`$db.vfc-model.naming-policy`' />
<parameter name='naming-policy-generate-name-input.vm-name' 
	value='`$tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-names[$vm-index].vm-name`' />
<parameter name='naming-policy-generate-name-input.naming-type' value='VNFC' /></set><call module='VNF-API' rpc='naming-policy-generate-name' mode='sync' ><outcome value='failure'>
<return status='failure'>
	<parameter name='ack-final' value='Y'/>
	<parameter name="error-code" value="500" />
    <parameter name="error-message" value="Failed to generate vnfc-name" />
</return></outcome></call><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-names[$vm-index].vnfc-names[0].vnfc-name' value='`$naming-policy-generate-name-output.vnfc-name`' />
</set><set>
<parameter name='tmp.vnfc[$vnfc-index].vnfc-name' 
	value = '`$naming-policy-generate-name-output.vnfc-name`' />
<parameter name='tmp.vnfc[$vnfc-index].nfc-function' 
	value = '`$db.vfc-model.nfc-function`' />
<parameter name='tmp.vnfc[$vnfc-index].nfc-naming-code' 
	value = '`$db.vfc-model.nfc-naming-code`' />
<parameter name='tmp.vnfc[$vnfc-index].orchestration-status' value = 'pending-create' />
</set><set>
<parameter name='vnfc-index' value='`$vnfc-index + 1`' />
</set><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-names[$vm-index].vnfc-names_length'
  value='`$vnfc-index`' />
</set></block></block></for><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-names_length'
  value='`$db.vf-module-to-vfc-mapping[$vm-type-index].vm-count`' />
</set></block><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-count'
  value='`$db.vf-module-to-vfc-mapping[$vm-type-index].vm-count`' />
</set></block></outcome></switch><switch test="`$db.vf-module-to-vfc-mapping[$vm-type-index].vm-type`">
<outcome value='Other'>
<set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-type'
  value='`$db.vf-module-to-vfc-mapping[$vm-type-index].vm-type`' />
</set></outcome></switch><get-resource plugin='org.openecomp.sdnc.sli.resource.sql.SqlResource' resource='SQL'
  key='SELECT * from VFC_TO_NETWORK_ROLE_MAPPING WHERE vfc_customization_uuid = $db.vf-module-to-vfc-mapping[$vm-type-index].vfc-customization-uuid'
  pfx='db.vfc-to-network-role-mapping[]'>

<outcome value='failure'>
<return status='failure'>
	<parameter name='ack-final' value='Y'/>
	<parameter name="error-code" value="500" />
    <parameter name="error-message" value="Error reading VFC_TO_NETWORK_ROLE_MAPPING table" />
</return></outcome><outcome value='not-found'>
<set>
<parameter name='db.vfc-to-network-role-mapping_length' value='0' />
</set></outcome></get-resource><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks_length' 
  value='`$db.vfc-to-network-role-mapping_length`' />
</set></block></for><block atomic='true'><set>  
<parameter name='auto-ip-assignment-input.vf-module.model-customization-uuid' 
	value='`$vnf-topology-operation-input.vnf-request-information.model-customization-uuid`' />
<parameter name='auto-ip-assignment-input.vf-module-id' 
	value='`$vnf-topology-operation-input.vnf-request-information.vnf-id`' />
<parameter name='auto-ip-assignment-input.vf-module-name' 
	value='`$vnf-topology-operation-input.vnf-request-information.vnf-name`' />
<parameter name='auto-ip-assignment-input.aic-cloud-region'
	value='`$vnf-topology-operation-input.vnf-request-information.aic-cloud-region`' />
<parameter name='auto-ip-assignment-input.service-instance-id' 
	value='`$vnf-topology-operation-input.service-information.service-instance-id`' />

<!--
vnf-id is same as vf-module-id
--></set><call module='VNF-API' rpc='auto-ip-assignment' mode='sync' ><outcome value='failure'>
<return status='failure'>
	<parameter name='ack-final' value='Y'/>
	<parameter name="error-code" value="500" />
    <parameter name="error-message" value="`'Failed to create assignment for vf-module: '+ $error-message`" />
</return></outcome></call><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-networks_length' 
	value='`$eipam-ip-block.plans_length`' /></set><for index='plan-index' start='0' end='`$eipam-ip-block.plans_length`' >
<set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-networks[$plan-index].network-role'
   value='`$eipam-ip-block.plans[$plan-index].l3-network.network-role`' />
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-networks[$plan-index].network-name'
   value='`$eipam-ip-block.plans[$plan-index].l3-network.network-name`' />
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-networks[$plan-index].network-id'
   value='`$eipam-ip-block.plans[$plan-index].l3-network.network-id`' />
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-networks[$plan-index].neutron-id'
   value='`$eipam-ip-block.plans[$plan-index].l3-network.neutron-network-id`' />
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-networks[$plan-index].contrail-network-fqdn'
   value='`$eipam-ip-block.plans[$plan-index].l3-network.contrail-network-fqdn`' />   </set></for></block><block atomic='true'><set>
<parameter name='tmp.consumed-ipv4-count' value='0' /></set><set>
<parameter name='tmp.consumed-ipv6-count' value='0' /></set><for index='vm-type-index' start='0' end='`$tmp.vnf-topology.vnf-assignments.vnf-vms_length`' >
<switch test='`$tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-type`'>
<outcome value=''><block>
</block></outcome><outcome value='Other'>
<block>
<set>
<parameter name='extcp-index' value='0' /></set><set>
<parameter name='tmp.increment-flag' value='false' /></set><for index='network-role-index' start='0' end='`$db.vfc-to-network-role-mapping_length`' >
<block>
<switch test='`$db.vfc-to-network-role-mapping[$network-role-index].ipv4-count &gt; 0`'>
<outcome value='true'>
<switch test='`$db.vfc-to-network-role-mapping[$network-role-index].ipv4-use-dhcp`'>
<outcome value=''><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].use-dhcp'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].ipv4-use-dhcp`' /></set></outcome><outcome value='Y'>
<set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].use-dhcp'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].ipv4-use-dhcp`' /></set></outcome><outcome value='N'>
<for index='pidx' start='0' end='`$eipam-ip-block.plans_length`' >
<switch test='`$eipam-ip-block.plans[$pidx].address-family`'>
<outcome value='ipv4'>
<switch test='`$db.vfc-to-network-role-mapping[$network-role-index].ipv4-address-plan-name == $eipam-ip-block.plans[$pidx].plan-name`'>
<outcome value='true'>
<for index='vm-index' start='0' end='`$tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-count`' >
<for index='ipv4-index' start='0' end='`$db.vfc-to-network-role-mapping[$network-role-index].ipv4-count`' >
<block>
<set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].use-dhcp'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].ipv4-use-dhcp`' />
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].ip-count'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].ipv4-count`' /></set><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].network-ips[$vm-index].ip-address'
   value='`$eipam-ip-block.plans[$pidx].requests[$tmp.consumed-ipv4-count].ip-prefix`' /></set><set>
<parameter name='tmp.consumed-ipv4-count' value='`$tmp.consumed-ipv4-count + 1`' /></set><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].network-role'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].network-role`' /></set><set>
<parameter name='tmp.increment-flag' value='true' /></set></block></for></for></outcome></switch></outcome><outcome value='ipv6'>
<switch test='`$db.vfc-to-network-role-mapping[$network-role-index].ipv6-address-plan-name == $eipam-ip-block.plans[$pidx].plan-name`'>
<outcome value='true'>
<for index='vm-index' start='0' end='`$tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-count`' >
<for index='ipv6-index' start='0' end='`$db.vfc-to-network-role-mapping[$network-role-index].ipv6-count`' >
<block>
<set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].network-ips-v6[$vm-index].ip-address-ipv6'
   value='`$eipam-ip-block.plans[$pidx].requests[$tmp.consumed-ipv6-count].ip-prefix`' /></set><set>
<parameter name='tmp.consumed-ipv6-count' value='`$tmp.consumed-ipv6-count + 1`' /></set><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].use-dhcp'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].ipv6-use-dhcp`' />
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].ip-count'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].ipv6-count`' /></set><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].network-role'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].network-role`' /></set><set>
<parameter name='tmp.increment-flag' value='true' /></set></block></for></for></outcome></switch></outcome></switch></for></outcome></switch></outcome></switch><switch test='`$db.vfc-to-network-role-mapping[$network-role-index].ipv6-count &gt; 0`'>
<outcome value='true'>
<switch test='`$db.vfc-to-network-role-mapping[$network-role-index].ipv6-use-dhcp`'>
<outcome value='N'>
<for index='pidx' start='0' end='`$eipam-ip-block.plans_length`' >
<switch test='`$eipam-ip-block.plans[$pidx].address-family`'>
<outcome value='ipv4'>
<switch test='`$db.vfc-to-network-role-mapping[$network-role-index].ipv4-address-plan-name == $eipam-ip-block.plans[$pidx].plan-name`'>
<outcome value='true'>
<for index='vm-index' start='0' end='`$tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-count`' >
<for index='ipv4-index' start='0' end='`$db.vfc-to-network-role-mapping[$network-role-index].ipv4-count`' >
<block>
<set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].use-dhcp'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].ipv4-use-dhcp`' />
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].ip-count'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].ipv4-count`' /></set><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].network-ips[$vm-index].ip-address'
   value='`$eipam-ip-block.plans[$pidx].requests[$tmp.consumed-ipv4-count].ip-prefix`' /></set><set>
<parameter name='tmp.consumed-ipv4-count' value='`$tmp.consumed-ipv4-count + 1`' /></set><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].network-role'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].network-role`' /></set><set>
<parameter name='tmp.increment-flag' value='true' /></set></block></for></for></outcome></switch></outcome><outcome value='ipv6'>
<switch test='`$db.vfc-to-network-role-mapping[$network-role-index].ipv6-address-plan-name == $eipam-ip-block.plans[$pidx].plan-name`'>
<outcome value='true'>
<for index='vm-index' start='0' end='`$tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-count`' >
<for index='ipv6-index' start='0' end='`$db.vfc-to-network-role-mapping[$network-role-index].ipv6-count`' >
<block>
<set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].network-ips-v6[$vm-index].ip-address-ipv6'
   value='`$eipam-ip-block.plans[$pidx].requests[$tmp.consumed-ipv6-count].ip-prefix`' /></set><set>
<parameter name='tmp.consumed-ipv6-count' value='`$tmp.consumed-ipv6-count + 1`' /></set><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].use-dhcp'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].ipv6-use-dhcp`' />
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].ip-count'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].ipv6-count`' /></set><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].network-role'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].network-role`' /></set><set>
<parameter name='tmp.increment-flag' value='true' /></set></block></for></for></outcome></switch></outcome></switch></for></outcome><outcome value=''><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].use-dhcp'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].ipv6-use-dhcp`' /></set></outcome><outcome value='Y'>
<set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$extcp-index].use-dhcp'
   value='`$db.vfc-to-network-role-mapping[$network-role-index].ipv6-use-dhcp`' /></set></outcome></switch></outcome></switch><switch test='`$tmp.increment-flag`'>
<outcome value='true'>
<set>
<parameter name='extcp-index' value='`$extcp-index + 1`' /></set></outcome></switch></block></for><set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks_length' 
  value='`$extcp-index`' />
</set></block></outcome></switch></for></block><block atomic='true'><for index='vm-type-index' start='0' end='`$tmp.vnf-topology.vnf-assignments.vnf-vms_length`' >
<switch test='`$tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-type`'>
<outcome value=''><block>
</block></outcome><outcome value='Other'>
<block>
<set>
<parameter name='extcp-index' value='0' /></set><set>
<parameter name='tmp.increment-flag' value='false' /></set><for index='network-role-index' start='0' end='`$db.vfc-to-network-role-mapping_length`' >
<block>
<switch test='`$db.vfc-to-network-role-mapping[$network-role-index].ipv4-floating-count &gt; 0`'>
<outcome value='true'>
<for index='pidx' start='0' end='`$eipam-ip-block.plans_length`' >
<switch test='`$eipam-ip-block.plans[$pidx].address-family`'>
<outcome value='ipv4'>
<switch test='`$db.vfc-to-network-role-mapping[$network-role-index].ipv4-address-plan-name == $eipam-ip-block.plans[$pidx].plan-name`'>
<outcome value='true'>
<block>
<set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$network-role-index].floating-ip'
   value='`$eipam-ip-block.plans[$pidx].requests[$tmp.consumed-ipv4-count].ip-prefix`' /></set><set>
<parameter name='tmp.consumed-ipv4-count' value='`$tmp.consumed-ipv4-count + 1`' /></set><set>
<parameter name='tmp.increment-flag' value='true' /></set></block></outcome></switch></outcome><outcome value='ipv6'>
<switch test='`$db.vfc-to-network-role-mapping[$network-role-index].ipv6-address-plan-name == $eipam-ip-block.plans[$pidx].plan-name`'>
<outcome value='true'>
<block>
<set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$network-role-index].floating-ip-v6'
   value='`$eipam-ip-block.plans[$pidx].requests[$tmp.consumed-ipv6-count].ip-prefix`' /></set><set>
<parameter name='tmp.consumed-ipv6-count' value='`$tmp.consumed-ipv6-count + 1`' /></set><set>
<parameter name='tmp.increment-flag' value='true' /></set></block></outcome></switch></outcome></switch></for></outcome></switch><switch test='`$db.vfc-to-network-role-mapping[$network-role-index].ipv6-floating-count &gt; 0`'>
<outcome value='true'>
<for index='pidx' start='0' end='`$eipam-ip-block.plans_length`' >
<switch test='`$eipam-ip-block.plans[$pidx].address-family`'>
<outcome value='ipv4'>
<switch test='`$db.vfc-to-network-role-mapping[$network-role-index].ipv4-address-plan-name == $eipam-ip-block.plans[$pidx].plan-name`'>
<outcome value='true'>
<block>
<set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$network-role-index].floating-ip'
   value='`$eipam-ip-block.plans[$pidx].requests[$tmp.consumed-ipv4-count].ip-prefix`' /></set><set>
<parameter name='tmp.consumed-ipv4-count' value='`$tmp.consumed-ipv4-count + 1`' /></set><set>
<parameter name='tmp.increment-flag' value='true' /></set></block></outcome></switch></outcome><outcome value='ipv6'>
<switch test='`$db.vfc-to-network-role-mapping[$network-role-index].ipv6-address-plan-name == $eipam-ip-block.plans[$pidx].plan-name`'>
<outcome value='true'>
<block>
<set>
<parameter name='tmp.vnf-topology.vnf-assignments.vnf-vms[$vm-type-index].vm-networks[$network-role-index].floating-ip-v6'
   value='`$eipam-ip-block.plans[$pidx].requests[$tmp.consumed-ipv6-count].ip-prefix`' /></set><set>
<parameter name='tmp.consumed-ipv6-count' value='`$tmp.consumed-ipv6-count + 1`' /></set><set>
<parameter name='tmp.increment-flag' value='true' /></set></block></outcome></switch></outcome></switch></for></outcome></switch><switch test='`$tmp.increment-flag`'>
<outcome value='true'>
<set>
<parameter name='extcp-index' value='`$extcp-index + 1`' /></set></outcome></switch></block></for></block></outcome></switch></for></block><block>
<switch test='`$tmp.vnf-topology.vnf-assignments.vnf-networks_length`'>
<outcome value=''><block>
</block></outcome><outcome value='0'><block>
</block></outcome><outcome value='Other'>
<block>
<for index='i' start='0' end='`$tmp.vnf-topology.vnf-assignments.vnf-networks_length`' >
<set>
<parameter name='service-data.vnf-topology-information.vnf-assignments.vnf-networks[$i].' 
	value='tmp.vnf-topology.vnf-assignments.vnf-networks[$i].' /></set></for><set>
<parameter name='service-data.vnf-topology-information.vnf-assignments.vnf-networks_length' 
	value='`$tmp.vnf-topology.vnf-assignments.vnf-networks_length`' /></set></block></outcome></switch><switch test='`$tmp.vnf-topology.vnf-assignments.availability-zones_length`'>
<outcome value=''><block>
</block></outcome><outcome value='0'><block>
</block></outcome><outcome value='Other'>
<block>
<for index='j' start='0' end='`$tmp.vnf-topology.vnf-assignments.availability-zones_length`' >
<set>
<parameter name='service-data.vnf-topology-information.vnf-assignments.availability-zones[$j].' 
	value='tmp.vnf-topology.vnf-assignments.availability-zones[$j].' /></set></for><set>
<parameter name='service-data.vnf-topology-information.vnf-assignments.availability-zones_length' 
	value='`$tmp.vnf-topology.vnf-assignments.availability-zones_length`' /></set></block></outcome></switch><switch test='`$tmp.vnf-topology.vnf-assignments.vnf-vms_length`'>
<outcome value=''><block>
</block></outcome><outcome value='0'><block>
</block></outcome><outcome value='Other'>
<for index='k' start='0' end='`$tmp.vnf-topology.vnf-assignments.vnf-vms_length`' >
<switch test='`$tmp.vnf-topology.vnf-assignments.vnf-vms[$k].vm-type`'>
<outcome value=''><block>
</block></outcome><outcome value='Other'>
<set>
<parameter name='service-data.vnf-topology-information.vnf-assignments.vnf-vms[$k].' 
	value='tmp.vnf-topology.vnf-assignments.vnf-vms[$k].' />
<parameter name='service-data.vnf-topology-information.vnf-assignments.vnf-vms_length' 
	value='`$tmp.vnf-topology.vnf-assignments.vnf-vms_length`' /></set></outcome></switch></for></outcome></switch></block><execute plugin='org.openecomp.sdnc.sli.SliPluginUtils.SliPluginUtils' method='printContext' >
<parameter name='filename' value='/var/tmp/bgb-vnfapi-vfmodule.log' />
</execute></block></method></service-logic>