<service-logic
    xmlns='http://www.onap.org/sdnc/svclogic'
    xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://www.onap.org/sdnc/svclogic ./svclogic.xsd' module='GENERIC-RESOURCE-API' version='${project.version}'>
    <method rpc='self-serve-eipam-create-pool' mode='sync'>
        <block atomic="true">
            <set>
                <parameter name='vnf-index' value='0' />
                <parameter name='vf-module-index' value='0' />
                <parameter name='ss.capability-name' value='self-serve-eipam-create-pool' />
                <parameter name='ss.capability-action' value='assign' />
                <parameter name='service-data.vnfs.vnf[$vnf-index].vnf-data.vnf-topology.sdnc-generated-cloud-resources' 
	value='true' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param_length' value = '1' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].name' value = 'ipv4-wan-address-pool' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].value' value = '${ipv4-wan-address-pool}' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.capability-name' value = 'eipam-create-pool' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[0].name' value = 'group-flag' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[0].value' value = 'Y' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[1].name' value = 'plan-name' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[1].value' value = 'GMIS_V4_VPE_WAN' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[2].name' value = 'service-instance-id' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[2].value' value = '12345' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[3].name' value = 'region' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[3].value' value = 'mtn6' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[4].name' value = 'address-family' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[4].value' value = 'ipv4' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[5].name' value = 'equipment' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[5].value' value = 'VPE' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[6].name' value = 'mask' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[6].value' value = '32' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[7].name' value = 'allocateSubnetFlag' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[7].value' value = 'N' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[8].name' value = 'service-instance-id' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key[8].value' value = '111222' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.resource-key_length' value = '9' />
                <parameter name='service-data.vnfs.vnf[0].vnf-data.vf-modules.vf-module[0].vf-module-data.vf-module-topology.vf-module-parameters.param[0].resource-resolution-data.status' value = 'PENDING' />
            </set>
            <switch test='`$ss.capability-name`'>
                <outcome value=''>
                    <return status="failure">
                        <parameter name="ack-final" value="Y" />
                        <parameter name="error-code" value="500"/>
                        <parameter name="error-message" value="ss.capability-name is null" />
                    </return>
                </outcome>
            </switch>
            <switch test='`$ss.capability-action`'>
                <outcome value=''>
                    <return status="failure">
                        <parameter name="ack-final" value="Y" />
                        <parameter name="error-code" value="500"/>
                        <parameter name="error-message" value="ss.capability-action is null" />
                    </return>
                </outcome>
                <outcome value='Other'>
                    <return status="failure">
                        <parameter name="ack-final" value="Y" />
                        <parameter name="error-code" value="500"/>
                        <parameter name="error-message" value="`'Invalid capability-action: '+ ss.capability-action + 'only assign is supported'`" />
                    </return>
                </outcome>
                <outcome value='assign'>
                    <block atomic="true">
                        <block>
                            <for index="pidx" start="0" end="`$service-data.vnfs.vnf[$vnf-index].vnf-data.vf-modules.vf-module[$vf-module-index].vf-module-data.vf-module-topology.vf-module-parameters.param_length`">
                                <set>
                                    <parameter name='tmp.ss.param.capability-name' 
	value='`$service-data.vnfs.vnf[$vnf-index].vnf-data.vf-modules.vf-module[$vf-module-index].vf-module-data.vf-module-topology.vf-module-parameters.param[$pidx].resource-resolution-data.capability-name`' />
                                </set>
                                <switch test='`$tmp.ss.param.capability-name == $ss.capability-name`'>
                                    <outcome value='true'>
                                        <break/>
                                    </outcome>
                                </switch>
                            </for>
                            <record plugin="org.onap.ccsdk.sli.core.sli.recording.Slf4jRecorder">
                                <parameter name="logger" value="message-log"/>
                                <parameter name="field1" value="__TIMESTAMP__"/>
                                <parameter name="field2" value="`'SS: pidx: ' + $pidx`"/>
                            </record>
                            <for index="kidx" start="0" end="`$service-data.vnfs.vnf[$vnf-index].vnf-data.vf-modules.vf-module[$vf-module-index].vf-module-data.vf-module-topology.vf-module-parameters.param[$pidx].resource-resolution-data.resource-key_length`">
                                <switch test='`$service-data.vnfs.vnf[$vnf-index].vnf-data.vf-modules.vf-module[$vf-module-index].vf-module-data.vf-module-topology.vf-module-parameters.param[$pidx].resource-resolution-data.resource-key[$kidx].name`'>
                                    <outcome value='group-flag'>
                                        <set>
                                            <parameter name='tmp.ss.group-flag' value='`$service-data.vnfs.vnf[$vnf-index].vnf-data.vf-modules.vf-module[$vf-module-index].vf-module-data.vf-module-topology.vf-module-parameters.param[$pidx].resource-resolution-data.resource-key[$kidx].value`' />
                                        </set>
                                    </outcome>
                                    <outcome value='allocateSubnetFlag'>
                                        <set>
                                            <parameter name='tmp.ss.allocateSubnetFlag' value='`$service-data.vnfs.vnf[$vnf-index].vnf-data.vf-modules.vf-module[$vf-module-index].vf-module-data.vf-module-topology.vf-module-parameters.param[$pidx].resource-resolution-data.resource-key[$kidx].value`' />
                                        </set>
                                    </outcome>
                                    <outcome value='plan-name'>
                                        <set>
                                            <parameter name='tmp.ss.plan-name' value='`$service-data.vnfs.vnf[$vnf-index].vnf-data.vf-modules.vf-module[$vf-module-index].vf-module-data.vf-module-topology.vf-module-parameters.param[$pidx].resource-resolution-data.resource-key[$kidx].value`' />
                                        </set>
                                    </outcome>
                                    <outcome value='service-instance-id'>
                                        <set>
                                            <parameter name='tmp.ss.service-instance-id' value='`$service-data.vnfs.vnf[$vnf-index].vnf-data.vf-modules.vf-module[$vf-module-index].vf-module-data.vf-module-topology.vf-module-parameters.param[$pidx].resource-resolution-data.resource-key[$kidx].value`' />
                                        </set>
                                    </outcome>
                                    <outcome value='address-family'>
                                        <set>
                                            <parameter name='tmp.ss.address-family' value='`$service-data.vnfs.vnf[$vnf-index].vnf-data.vf-modules.vf-module[$vf-module-index].vf-module-data.vf-module-topology.vf-module-parameters.param[$pidx].resource-resolution-data.resource-key[$kidx].value`' />
                                        </set>
                                    </outcome>
                                    <outcome value='mask'>
                                        <set>
                                            <parameter name='tmp.ss.mask' value='`$service-data.vnfs.vnf[$vnf-index].vnf-data.vf-modules.vf-module[$vf-module-index].vf-module-data.vf-module-topology.vf-module-parameters.param[$pidx].resource-resolution-data.resource-key[$kidx].value`' />
                                        </set>
                                    </outcome>
                                </switch>
                            </for>
                        </block>
                        <set>
                            <parameter name='aai.cloud-region.cloud-region-id' 
	value='`$service-data.vnfs.vnf[$vnf-index].vnf-data.vf-modules.vf-module[$vf-module-index].vf-module-data.vf-module-request-input.aic-cloud-region`' />
                        </set>
                        <set>
                            <parameter name='tmp.skip-first-level' value='Y' />
                            <parameter name='tmp.allocate-subnet-flag' value='`$tmp.ss.allocateSubnetFlag`' />
                            <parameter name='eipam-ip-block.group-flag' value='`$tmp.ss.group-flag`' />
                        </set>
                        <switch test='`$tmp.ss.address-family`'>
                            <outcome value='ipv4'>
                                <set>
                                    <parameter name='network-model.eipam-v4-address-plan' value='tmp.ss.plan-name' />
                                    <parameter name='network-model.use-ipv4' value='Y' />
                                    <parameter name='network-model.ipv4-ip-version' value='tmp.ss.address-family' />
                                    <parameter name='network-model.ipv4-cidr-mask' value='tmp.ss.mask' />
                                </set>
                            </outcome>
                            <outcome value='ipv6'>
                                <set>
                                    <parameter name='network-model.eipam-v6-address-plan' value='tmp.ss.plan-name' />
                                    <parameter name='network-model.use-ipv6' value='Y' />
                                    <parameter name='network-model.ipv6-ip-version' value='tmp.ss.address-family' />
                                    <parameter name='network-model.ipv6-cidr-mask' value='tmp.ss.mask' />
                                </set>
                            </outcome>
                        </switch>
                        <call module='GENERIC-RESOURCE-API' rpc='process-generic-eipam-pools' mode='sync' >
                            <outcome value='failure'>
                                <return status="failure">
                                    <parameter name="ack-final" value="Y" />
                                    <parameter name="error-code" value="500"/>
                                    <parameter name="error-message" value="`'Error from process-generic-eipam-pools, ' + $error-message`" />
                                </return>
                            </outcome>
                        </call>
                    </block>
                </outcome>
            </switch>
        </block>
    </method>
</service-logic>