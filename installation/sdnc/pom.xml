<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<parent>
		<groupId>org.openecomp.sdnc.oam</groupId>
		<artifactId>installation</artifactId>
		<version>1.1.0-SNAPSHOT</version>
	</parent>

	<modelVersion>4.0.0</modelVersion>
	<packaging>pom</packaging>
	<groupId>org.openecomp.sdnc.oam</groupId>
	<artifactId>installation-sdnc</artifactId>
	<version>1.1.0-SNAPSHOT</version>

	<name>Installation - sdnc</name>
	<description>Creates SDN Controller Docker container</description>

	<properties>
		<image.name>openecomp/sdnc-image</image.name>
		<sdnc.project.version>${project.version}</sdnc.project.version>
		<sdnc.core.version>${project.version}</sdnc.core.version>
		<sdnc.adaptors.version>${project.version}</sdnc.adaptors.version>
		<sdnc.northbound.version>${project.version}</sdnc.northbound.version>
		<sdnc.plugins.version>${project.version}</sdnc.plugins.version>
	</properties>


	<build>
		<plugins>


			<plugin>
				<groupId>org.codehaus.groovy.maven</groupId>
				<artifactId>gmaven-plugin</artifactId>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<source>
								println project.properties['sdnc.project.version'];
								def versionArray;
								if ( project.properties['sdnc.project.version'] != null ) {
									versionArray =
									project.properties['sdnc.project.version'].split('\\.');
								}

								if (project.properties['sdnc.project.version'].endsWith("-SNAPSHOT")) {
									project.properties['project.docker.latesttag.version']=versionArray[0] + '.' + versionArray[1] + "-SNAPSHOT-latest";
								} else {
									project.properties['project.docker.latesttag.version']=versionArray[0] + '.' + versionArray[1] + "-STAGING-latest";
								}

								println 'New Tag for docker:' +
								project.properties['project.docker.latesttag.version'];
							</source>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.16.5</version>
				<inherited>false</inherited>
				<configuration>

					<images>
						<image>
							<name>${image.name}</name>
							<build>
								<cleanup>try</cleanup>
								<dockerFileDir>${basedir}/target/docker-stage</dockerFileDir>
								<dockerFile>${basedir}/target/docker-stage/Dockerfile</dockerFile>
								<tags>
									<tag>${project.version}</tag>
									<tag>${project.version}-STAGING-${maven.build.timestamp}</tag>
									<tag>${project.docker.latesttag.version}</tag>
								</tags>
							</build>
						</image>
					</images>
				</configuration>
				<executions>
					<execution>
						<id>generate-images</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>

					<execution>
						<id>push-images</id>
						<phase>deploy</phase>
						<goals>
							<goal>build</goal>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<id>get-odl-distribution</id>
						<phase>validate</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.opendaylight.integration</groupId>
									<artifactId>distribution-karaf</artifactId>
									<version>0.5.1-Boron-SR1</version>
									<type>tar.gz</type>

									<overWrite>true</overWrite>
									<outputDirectory>${basedir}/target/docker-stage</outputDirectory>
								</artifactItem>
							</artifactItems>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-dockerfile</id>
						<goals>
							<goal>copy-resources</goal>
						</goals><!-- here the phase you need -->
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/docker</directory>
									<includes>
										<include>Dockerfile</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>

					<execution>
						<id>copy-scripts</id>
						<goals>
							<goal>copy-resources</goal>
						</goals><!-- here the phase you need -->
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage/opt/openecomp/sdnc/bin</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/scripts</directory>
									<includes>
										<include>*.sh</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>

					<execution>
						<id>copy-tarballs</id>
						<goals>
							<goal>copy-resources</goal>
						</goals><!-- here the phase you need -->
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<includes>
										<include>*.tgz</include>
										<include>idmlight.db.mv.db</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-data</id>
						<goals>
							<goal>copy-resources</goal>
						</goals><!-- here the phase you need -->
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage/opt/openecomp/sdnc/data</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<includes>
										<include>*.dump</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-properties</id>
						<goals>
							<goal>copy-resources</goal>
						</goals><!-- here the phase you need -->
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage/opt/openecomp/sdnc/data/properties</outputDirectory>
							<resources>
								<resource>
									<directory>../src/main/properties</directory>
									<includes>
										<include>*.properties</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-keystores</id>
						<goals>
							<goal>copy-resources</goal>
						</goals><!-- here the phase you need -->
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage/opt/openecomp/sdnc/data/stores</outputDirectory>
							<resources>
								<resource>
									<directory>../src/main/stores</directory>
									<includes>
										<include>*.jks</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>exec-maven-plugin</artifactId>
				<groupId>org.codehaus.mojo</groupId>
				<version>1.5.0</version>
				<executions>

					<execution>
						<id>Get features</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>/bin/bash</executable>
							<environmentVariables>
								<SDNC_CORE_VERSION>${sdnc.core.version}</SDNC_CORE_VERSION>
								<SDNC_ADAPTORS_VERSION>${sdnc.adaptors.version}</SDNC_ADAPTORS_VERSION>
								<SDNC_NORTHBOUND_VERSION>${sdnc.northbound.version}</SDNC_NORTHBOUND_VERSION>
								<SDNC_PLUGINS_VERSION>${sdnc.plugins.version}</SDNC_PLUGINS_VERSION>
								<SDNC_OAM_VERSION>${project.version}</SDNC_OAM_VERSION>
							</environmentVariables>
							<arguments>
								<argument>${basedir}/src/main/scripts/installZips.sh</argument>
								<argument>${basedir}/target/docker-stage/opt/openecomp/sdnc</argument>
							</arguments>
						</configuration>
					</execution>

					<execution>
						<id>change shell permissions</id>
						<phase>process-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>/usr/bin/find</executable>
							<arguments>
								<argument>${basedir}/target/docker-stage/opt/openecomp/sdnc</argument>
								<argument>-name</argument>
								<argument>*.sh</argument>
								<argument>-exec</argument>
								<argument>chmod</argument>
								<argument>+x</argument>
								<argument>{}</argument>
								<argument>;</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>


		</plugins>

	</build>
	<organization>
		<name>openECOMP</name>
	</organization>
</project>
